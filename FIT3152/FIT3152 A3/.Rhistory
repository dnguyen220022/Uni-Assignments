#normalise weight
normalise <- function(x) (x - min(x)) / (max(x) - min(x))
normalisedWeights <- normalise(E(ByDoc.sp)$weight)
#set edge colour based on weight
edgeColour <- colorRampPalette(c("black", "green"))
E(ByDoc.sp)$color <- edgeColour(100)[(cut(normalisedWeights, breaks = 100))]
#plot graph
plot(cl, ByDoc.sp, layout = l, edge.width = 2, edge.color = E(ByDoc.sp)$color,
main = "Communities and Connection Strengh in the Document Network")
#format legend
legendColours <- edgeColour(5)
legendWeights <- seq(min(E(ByDoc.sp)$weight), max(E(ByDoc.sp)$weight), length.out = 5)
legendLabels <- round(legendWeights, 2)
#add legend to graph
legend("topright", legend = legendLabels, col = legendColours, lwd = 3,
title = "Terms Shared", bty = "n", cex = 1)
ByDoc.sp <- ByDoc
#graph layout
l <- layout_in_circle(ByDoc.sp)
#get communities
set.seed(32471033)
cl <- cluster_spinglass(ByDoc.sp)
#normalise weight
normalise <- function(x) (x - min(x)) / (max(x) - min(x))
normalisedWeights <- normalise(E(ByDoc.sp)$weight)
#set edge colour based on weight
edgeColour <- colorRampPalette(c("black", "green"))
E(ByDoc.sp)$color <- edgeColour(100)[(cut(normalisedWeights, breaks = 100))]
#plot graph
plot(cl, ByDoc.sp, layout = l, edge.width = 2, edge.color = E(ByDoc.sp)$color,
main = "Communities and Connection Strengh in the Document Network")
#format legend
legendColours <- edgeColour(5)
legendWeights <- seq(min(E(ByDoc.sp)$weight), max(E(ByDoc.sp)$weight), length.out = 5)
legendLabels <- round(legendWeights, 2)
#add legend to graph
legend("topright", legend = legendLabels, col = legendColours, lwd = 3,
title = "Terms Shared", bty = "n", cex = 1)
l <- layout_in_circle(ByDoc.sp)
#get communities
set.seed(32471033)
cl <- cluster_spinglass(ByDoc.sp)
#normalise weight
normalise <- function(x) (x - min(x)) / (max(x) - min(x))
normalisedWeights <- normalise(E(ByDoc.sp)$weight)
#set edge colour based on weight
edgeColour <- colorRampPalette(c("black", "yellow"))
E(ByDoc.sp)$color <- edgeColour(100)[(cut(normalisedWeights, breaks = 100))]
#plot graph
plot(cl, ByDoc.sp, layout = l, edge.width = 2, edge.color = E(ByDoc.sp)$color,
main = "Communities and Connection Strengh in the Document Network")
#format legend
legendColours <- edgeColour(5)
legendWeights <- seq(min(E(ByDoc.sp)$weight), max(E(ByDoc.sp)$weight), length.out = 5)
legendLabels <- round(legendWeights, 2)
#add legend to graph
legend("topright", legend = legendLabels, col = legendColours, lwd = 3,
title = "Terms Shared", bty = "n", cex = 1)
l <- layout_in_circle(ByDoc.sp)
#get communities
set.seed(32471033)
cl <- cluster_spinglass(ByDoc.sp)
#normalise weight
normalise <- function(x) (x - min(x)) / (max(x) - min(x))
normalisedWeights <- normalise(E(ByDoc.sp)$weight)
#set edge colour based on weight
edgeColour <- colorRampPalette(c("black", "red"))
E(ByDoc.sp)$color <- edgeColour(100)[(cut(normalisedWeights, breaks = 100))]
#plot graph
plot(cl, ByDoc.sp, layout = l, edge.width = 2, edge.color = E(ByDoc.sp)$color,
main = "Communities and Connection Strengh in the Document Network")
#format legend
legendColours <- edgeColour(5)
legendWeights <- seq(min(E(ByDoc.sp)$weight), max(E(ByDoc.sp)$weight), length.out = 5)
legendLabels <- round(legendWeights, 2)
#add legend to graph
legend("topright", legend = legendLabels, col = legendColours, lwd = 3,
title = "Terms Shared", bty = "n", cex = 1)
l <- layout_in_circle(ByDoc.sp)
#get communities
set.seed(32471033)
cl <- cluster_spinglass(ByDoc.sp)
#normalise weight
normalise <- function(x) (x - min(x)) / (max(x) - min(x))
normalisedWeights <- normalise(E(ByDoc.sp)$weight)
#set edge colour based on weight
edgeColour <- colorRampPalette(c("black", "red"))
E(ByDoc.sp)$color <- edgeColour(100)[(cut(normalisedWeights, breaks = 100))]
#plot graph
plot(cl, ByDoc.sp, layout = l, edge.width = 2, edge.color = E(ByDoc.sp)$color,
main = "Communities and Connection Strengh in the Document Network")
#format legend
legendColours <- edgeColour(5)
legendWeights <- seq(min(E(ByDoc.sp)$weight), max(E(ByDoc.sp)$weight), length.out = 5)
legendLabels <- round(legendWeights, 1)
#add legend to graph
legend("topright", legend = legendLabels, col = legendColours, lwd = 3,
title = "Terms Shared", bty = "n", cex = 1)
ByDoc.sp <- ByDoc
#graph layout
l <- layout_in_circle(ByDoc.sp)
#get communities
set.seed(32471033)
cl <- cluster_spinglass(ByDoc.sp)
#normalise weight
normalise <- function(x) (x - min(x)) / (max(x) - min(x))
normalisedWeights <- normalise(E(ByDoc.sp)$weight)
#set edge colour based on weight
edgeColour <- colorRampPalette(c("black", "red"))
E(ByDoc.sp)$color <- edgeColour(100)[(cut(normalisedWeights, breaks = 100))]
#plot graph
plot(cl, ByDoc.sp, layout = l, edge.width = 2, edge.color = E(ByDoc.sp)$color,
main = "Communities and Connection Strengh in the Document Network")
#format legend
legendColours <- edgeColour(5)
legendWeights <- seq(min(E(ByDoc.sp)$weight), max(E(ByDoc.sp)$weight), length.out = 5)
legendLabels <- round(legendWeights, 1)
#add legend to graph
legend("topright", legend = legendLabels, col = legendColours, lwd = 3,
title = "Edge Weight", bty = "n", cex = 1)
#create network data for single mode network for tokens
dtmsx = dtms
dtmsx = as.matrix((dtmsx > 0) + 0)
byTokenMatrix = t(dtmsx) %*% dtmsx
diag(byTokenMatrix) = 0
#create and plot graph
byToken = graph_from_adjacency_matrix(byTokenMatrix,mode = "undirected", weighted = TRUE)
plot(byToken)
###############################
#improved graph of tokens
#shows communities
#shows strength of connections
###############################
#remove edges with low weight (below mean edge weight)
token.cut.off <- mean(E(byToken)$weight)
byToken.sp <- delete_edges(byToken, E(byToken)[weight<token.cut.off])
#graph layout
l <- layout_with_fr(byToken.sp)
#get communities
clp <- cluster_optimal(byToken.sp)
#normalise weight
normalise <- function(x) (x - min(x)) / (max(x) - min(x))
normalisedWeights <- normalise(E(byToken.sp)$weight)
#set edge colour based on weight
edgeColour <- colorRampPalette(c("black", "green"))
E(byToken.sp)$color <- edgeColour(100)[(cut(normalisedWeights, breaks = 100))]
#plot graph
plot(clp, byToken.sp, layout = l, vertex.size = 20, edge.width = 2, edge.color = E(byToken.sp)$color,
main = "Communities and Connection Strengh in the Token Network")
#format legend
legendColours <- edgeColour(5)
legendWeights <- seq(min(E(byToken.sp)$weight), max(E(byToken.sp)$weight), length.out = 5)
legendLabels <- round(legendWeights, 2)
#add legend to graph
legend("topright", legend = legendLabels, col = legendColours, lwd = 3,
title = "Edge Weights", bty = "n", cex = 1)
byToken.sp <- byToken
#graph layout
l <- layout_with_fr(byToken.sp)
#get communities
clp <- cluster_optimal(byToken.sp)
#normalise weight
normalise <- function(x) (x - min(x)) / (max(x) - min(x))
normalisedWeights <- normalise(E(byToken.sp)$weight)
#set edge colour based on weight
edgeColour <- colorRampPalette(c("black", "green"))
E(byToken.sp)$color <- edgeColour(100)[(cut(normalisedWeights, breaks = 100))]
#plot graph
plot(clp, byToken.sp, layout = l, vertex.size = 20, edge.width = 2, edge.color = E(byToken.sp)$color,
main = "Communities and Connection Strengh in the Token Network")
#format legend
legendColours <- edgeColour(5)
legendWeights <- seq(min(E(byToken.sp)$weight), max(E(byToken.sp)$weight), length.out = 5)
legendLabels <- round(legendWeights, 2)
#add legend to graph
legend("topright", legend = legendLabels, col = legendColours, lwd = 3,
title = "Edge Weights", bty = "n", cex = 1)
token.cut.off <- mean(E(byToken)$weight)
byToken.sp <- delete_edges(byToken, E(byToken)[weight<token.cut.off])
#graph layout
l <- layout_with_fr(byToken.sp)
#get communities
clp <- cluster_optimal(byToken.sp)
#normalise weight
normalise <- function(x) (x - min(x)) / (max(x) - min(x))
normalisedWeights <- normalise(E(byToken.sp)$weight)
#set edge colour based on weight
edgeColour <- colorRampPalette(c("black", "green"))
E(byToken.sp)$color <- edgeColour(100)[(cut(normalisedWeights, breaks = 100))]
#plot graph
plot(clp, byToken.sp, layout = l, vertex.size = 20, edge.width = 2, edge.color = E(byToken.sp)$color,
main = "Communities and Connection Strengh in the Token Network")
#format legend
legendColours <- edgeColour(5)
legendWeights <- seq(min(E(byToken.sp)$weight), max(E(byToken.sp)$weight), length.out = 5)
legendLabels <- round(legendWeights, 2)
#add legend to graph
legend("topright", legend = legendLabels, col = legendColours, lwd = 3,
title = "Edge Weights", bty = "n", cex = 1)
#2 mode graph
#code taken from lecture slides
dtmsa = as.data.frame(dtms)
dtmsa$ABS = rownames(dtmsa)
dtmsb = data.frame()
for (i in 1:nrow(dtmsa)){
for (j in 1:(ncol(dtmsa)-1)){
touse = cbind(dtmsa[i,j], dtmsa[i,ncol(dtmsa)],
colnames(dtmsa[j]))
dtmsb = rbind(dtmsb, touse ) } }
colnames(dtmsb) = c("weight", "doc", "token")
dtmsc = dtmsb[dtmsb$weight != 0,]
dtmsc = dtmsc[,c(2,3,1)]
#plot graph
g <- graph.data.frame(dtmsc, directed=FALSE)
bipartite.mapping(g)
V(g)$type <- bipartite_mapping(g)$type
V(g)$color <- ifelse(V(g)$type, "lightgreen", "pink")
V(g)$shape <- ifelse(V(g)$type, "circle", "square")
E(g)$color <- "gray"
vertex.label <- V(g)$name
l <- layout_nicely(g)
plot(g, layout = l)
###############################
#improved graph of tokens
#shows communities
#shows strength of connections
###############################
#get data
g.sp <- g
#set margins
par(mar = c(3, 3, 3, 3))
#graph layout
l <- layout_with_graphopt(g.sp)
#get communities
clp <- cluster_optimal(g.sp)
#normalise weight
normalise <- function(x) (x - min(x)) / (max(x) - min(x))
normalisedWeights <- normalise(as.numeric(E(g.sp)$weight))
#set edge colour based on weight
edgeColour <- colorRampPalette(c("red", "green"))
E(g.sp)$color <- edgeColour(100)[(cut(normalisedWeights, breaks = 100))]
#change size based on centrality
V(g.sp)$size <- degree(g.sp) * 1.75
V(g.sp)$label.cex <- degree(g.sp) * 0.2
#plot graph
V(g.sp)$label.color <- "black"
plot(clp, g.sp, layout = layout.auto, edge.width = 2, edge.color = E(g.sp)$color,
main = "Communities and Connection Strength in 2 Mode Network with Node Size Corresponding to Centrality")
#format weight legend
legendColours <- edgeColour(5)
legendWeights <- seq(min(E(g.sp)$weight), max(E(g.sp)$weight), length.out = 5)
legendLabels <- round(legendWeights, 2)
#add legend
legend("topright", legend = legendLabels, col = legendColours, lwd = 3,
title = "Edge Weights", bty = "n", cex = 1)
#format node colour legend
nodeCommunity <- unique(membership(clp))
nodeColour <- c("yellow", "skyblue", "darkgreen", "orange")
#add legend
legend("right", legend = paste("Community", nodeCommunity),
col = nodeColour[nodeCommunity], pch = 19, pt.cex = 2, bty = "n")
#add node shape legend
legend("bottomright", legend = c("Document", "Token"),
pch = c(0, 1), pt.cex = 2, bty = "n")
set.seed(32471033)
clp <- cluster_optimal(g.sp)
#normalise weight
normalise <- function(x) (x - min(x)) / (max(x) - min(x))
normalisedWeights <- normalise(as.numeric(E(g.sp)$weight))
#set edge colour based on weight
edgeColour <- colorRampPalette(c("red", "green"))
E(g.sp)$color <- edgeColour(100)[(cut(normalisedWeights, breaks = 100))]
#change size based on centrality
V(g.sp)$size <- degree(g.sp) * 1.75
V(g.sp)$label.cex <- degree(g.sp) * 0.2
#plot graph
V(g.sp)$label.color <- "black"
plot(clp, g.sp, layout = layout.auto, edge.width = 2, edge.color = E(g.sp)$color,
main = "Communities and Connection Strength in 2 Mode Network with Node Size Corresponding to Centrality")
#format weight legend
legendColours <- edgeColour(5)
legendWeights <- seq(min(E(g.sp)$weight), max(E(g.sp)$weight), length.out = 5)
legendLabels <- round(legendWeights, 2)
#add legend
legend("topright", legend = legendLabels, col = legendColours, lwd = 3,
title = "Edge Weights", bty = "n", cex = 1)
#format node colour legend
nodeCommunity <- unique(membership(clp))
nodeColour <- c("yellow", "skyblue", "darkgreen", "orange")
#add legend
legend("right", legend = paste("Community", nodeCommunity),
col = nodeColour[nodeCommunity], pch = 19, pt.cex = 2, bty = "n")
#add node shape legend
legend("bottomright", legend = c("Document", "Token"),
pch = c(0, 1), pt.cex = 2, bty = "n")
set.seed(32471033)
clp <- cluster_spinglass(g.sp)
#normalise weight
normalise <- function(x) (x - min(x)) / (max(x) - min(x))
normalisedWeights <- normalise(as.numeric(E(g.sp)$weight))
#set edge colour based on weight
edgeColour <- colorRampPalette(c("red", "green"))
E(g.sp)$color <- edgeColour(100)[(cut(normalisedWeights, breaks = 100))]
#change size based on centrality
V(g.sp)$size <- degree(g.sp) * 1.75
V(g.sp)$label.cex <- degree(g.sp) * 0.2
#plot graph
V(g.sp)$label.color <- "black"
plot(clp, g.sp, layout = layout.auto, edge.width = 2, edge.color = E(g.sp)$color,
main = "Communities and Connection Strength in 2 Mode Network with Node Size Corresponding to Centrality")
#format weight legend
legendColours <- edgeColour(5)
legendWeights <- seq(min(E(g.sp)$weight), max(E(g.sp)$weight), length.out = 5)
legendLabels <- round(legendWeights, 2)
#add legend
legend("topright", legend = legendLabels, col = legendColours, lwd = 3,
title = "Edge Weights", bty = "n", cex = 1)
#format node colour legend
nodeCommunity <- unique(membership(clp))
nodeColour <- c("yellow", "skyblue", "darkgreen", "orange")
#add legend
legend("right", legend = paste("Community", nodeCommunity),
col = nodeColour[nodeCommunity], pch = 19, pt.cex = 2, bty = "n")
#add node shape legend
legend("bottomright", legend = c("Document", "Token"),
pch = c(0, 1), pt.cex = 2, bty = "n")
#2 mode graph
#code taken from lecture slides
dtmsa = as.data.frame(dtms)
dtmsa$ABS = rownames(dtmsa)
dtmsb = data.frame()
for (i in 1:nrow(dtmsa)){
for (j in 1:(ncol(dtmsa)-1)){
touse = cbind(dtmsa[i,j], dtmsa[i,ncol(dtmsa)],
colnames(dtmsa[j]))
dtmsb = rbind(dtmsb, touse ) } }
colnames(dtmsb) = c("weight", "doc", "token")
dtmsc = dtmsb[dtmsb$weight != 0,]
dtmsc = dtmsc[,c(2,3,1)]
#plot graph
g <- graph.data.frame(dtmsc, directed=FALSE)
bipartite.mapping(g)
V(g)$type <- bipartite_mapping(g)$type
V(g)$color <- ifelse(V(g)$type, "lightgreen", "pink")
V(g)$shape <- ifelse(V(g)$type, "circle", "square")
E(g)$color <- "gray"
vertex.label <- V(g)$name
l <- layout_nicely(g)
plot(g, layout = l)
#create network data for single mode network for tokens
dtmsx = dtms
dtmsx = as.matrix((dtmsx > 0) + 0)
byTokenMatrix = t(dtmsx) %*% dtmsx
diag(byTokenMatrix) = 0
#create and plot graph
byToken = graph_from_adjacency_matrix(byTokenMatrix,mode = "undirected", weighted = TRUE)
plot(byToken)
###############################
#improved graph of tokens
#shows communities
#shows strength of connections
###############################
#remove edges with low weight (below mean edge weight)
token.cut.off <- mean(E(byToken)$weight)
byToken.sp <- delete_edges(byToken, E(byToken)[weight<token.cut.off])
#graph layout
l <- layout_with_fr(byToken.sp)
#get communities
clp <- cluster_optimal(byToken.sp)
#normalise weight
normalise <- function(x) (x - min(x)) / (max(x) - min(x))
normalisedWeights <- normalise(E(byToken.sp)$weight)
#set edge colour based on weight
edgeColour <- colorRampPalette(c("black", "green"))
E(byToken.sp)$color <- edgeColour(100)[(cut(normalisedWeights, breaks = 100))]
#plot graph
plot(clp, byToken.sp, layout = l, vertex.size = 20, edge.width = 2, edge.color = E(byToken.sp)$color,
main = "Communities and Connection Strengh in the Token Network")
#format legend
legendColours <- edgeColour(5)
legendWeights <- seq(min(E(byToken.sp)$weight), max(E(byToken.sp)$weight), length.out = 5)
legendLabels <- round(legendWeights, 2)
#add legend to graph
legend("topright", legend = legendLabels, col = legendColours, lwd = 3,
title = "Edge Weights", bty = "n", cex = 1)
plot(byToken, main = "Single-Mode Token Network")
#remove edges with low weight (below mean edge weight)
token.cut.off <- mean(E(byToken)$weight)
byToken.sp <- delete_edges(byToken, E(byToken)[weight<token.cut.off])
#graph layout
l <- layout_with_fr(byToken.sp)
#get communities
clp <- cluster_optimal(byToken.sp)
#normalise weight
normalise <- function(x) (x - min(x)) / (max(x) - min(x))
normalisedWeights <- normalise(E(byToken.sp)$weight)
#set edge colour based on weight
edgeColour <- colorRampPalette(c("black", "green"))
E(byToken.sp)$color <- edgeColour(100)[(cut(normalisedWeights, breaks = 100))]
#plot graph
plot(clp, byToken.sp, layout = l, vertex.size = 20, edge.width = 2, edge.color = E(byToken.sp)$color,
main = "Communities and Connection Strengh in the Token Network")
#format legend
legendColours <- edgeColour(5)
legendWeights <- seq(min(E(byToken.sp)$weight), max(E(byToken.sp)$weight), length.out = 5)
legendLabels <- round(legendWeights, 2)
#add legend to graph
legend("topright", legend = legendLabels, col = legendColours, lwd = 3,
title = "Edge Weights", bty = "n", cex = 1)
#2 mode graph
#code taken from lecture slides
dtmsa = as.data.frame(dtms)
dtmsa$ABS = rownames(dtmsa)
dtmsb = data.frame()
for (i in 1:nrow(dtmsa)){
for (j in 1:(ncol(dtmsa)-1)){
touse = cbind(dtmsa[i,j], dtmsa[i,ncol(dtmsa)],
colnames(dtmsa[j]))
dtmsb = rbind(dtmsb, touse ) } }
colnames(dtmsb) = c("weight", "doc", "token")
dtmsc = dtmsb[dtmsb$weight != 0,]
dtmsc = dtmsc[,c(2,3,1)]
#plot graph
g <- graph.data.frame(dtmsc, directed=FALSE)
bipartite.mapping(g)
V(g)$type <- bipartite_mapping(g)$type
V(g)$color <- ifelse(V(g)$type, "lightgreen", "pink")
V(g)$shape <- ifelse(V(g)$type, "circle", "square")
E(g)$color <- "gray"
vertex.label <- V(g)$name
l <- layout_nicely(g)
plot(g, layout = l)
#get data
g.sp <- g
#set margins
par(mar = c(3, 3, 3, 3))
#graph layout
l <- layout_with_graphopt(g.sp)
#get communities
set.seed(32471033)
clp <- cluster_spinglass(g.sp)
#normalise weight
normalise <- function(x) (x - min(x)) / (max(x) - min(x))
normalisedWeights <- normalise(as.numeric(E(g.sp)$weight))
#set edge colour based on weight
edgeColour <- colorRampPalette(c("red", "green"))
E(g.sp)$color <- edgeColour(100)[(cut(normalisedWeights, breaks = 100))]
#change size based on centrality
V(g.sp)$size <- degree(g.sp) * 1.75
#V(g.sp)$label.cex <- degree(g.sp) * 0.2
#plot graph
V(g.sp)$label.color <- "black"
plot(clp, g.sp, layout = layout.auto, edge.width = 2, edge.color = E(g.sp)$color,
main = "Communities and Connection Strength in 2 Mode Network with Node Size Corresponding to Centrality")
#format weight legend
legendColours <- edgeColour(5)
legendWeights <- seq(min(E(g.sp)$weight), max(E(g.sp)$weight), length.out = 5)
legendLabels <- round(legendWeights, 2)
#add legend
legend("topright", legend = legendLabels, col = legendColours, lwd = 3,
title = "Edge Weights", bty = "n", cex = 1)
#format node colour legend
nodeCommunity <- unique(membership(clp))
nodeColour <- c("yellow", "skyblue", "darkgreen", "orange")
#add legend
legend("right", legend = paste("Community", nodeCommunity),
col = nodeColour[nodeCommunity], pch = 19, pt.cex = 2, bty = "n")
#add node shape legend
legend("bottomright", legend = c("Document", "Token"),
pch = c(0, 1), pt.cex = 2, bty = "n")
l <- layout_nicely(g)
plot(g, layout = l, main = "2-Mode Network of Documents and Tokens")
View(dtmsc)
View(dtms)
#get data
g.sp <- g
#set margins
par(mar = c(3, 3, 3, 3))
#graph layout
l <- layout_with_graphopt(g.sp)
#get communities
set.seed(32471033)
clp <- cluster_spinglass(g.sp)
#normalise weight
normalise <- function(x) (x - min(x)) / (max(x) - min(x))
normalisedWeights <- normalise(as.numeric(E(g.sp)$weight))
#set edge colour based on weight
edgeColour <- colorRampPalette(c("red", "green"))
E(g.sp)$color <- edgeColour(100)[(cut(normalisedWeights, breaks = 100))]
#change size based on centrality
V(g.sp)$size <- degree(g.sp) * 1.75
#V(g.sp)$label.cex <- degree(g.sp) * 0.2
#plot graph
V(g.sp)$label.color <- "black"
plot(clp, g.sp, layout = layout.auto, edge.width = 2, edge.color = E(g.sp)$color,
main = "Communities and Connection Strength in 2 Mode Network with Node Size Corresponding to Centrality")
#format weight legend
legendColours <- edgeColour(5)
legendWeights <- seq(min(E(g.sp)$weight), max(E(g.sp)$weight), length.out = 5)
legendLabels <- round(legendWeights, 2)
#add legend
legend("topright", legend = legendLabels, col = legendColours, lwd = 3,
title = "Edge Weights", bty = "n", cex = 1)
#format node colour legend
nodeCommunity <- unique(membership(clp))
nodeColour <- c("yellow", "skyblue", "darkgreen", "orange")
#add legend
legend("right", legend = paste("Community", nodeCommunity),
col = nodeColour[nodeCommunity], pch = 19, pt.cex = 2, bty = "n")
#add node shape legend
legend("bottomright", legend = c("Document", "Token"),
pch = c(0, 1), pt.cex = 2, bty = "n")
